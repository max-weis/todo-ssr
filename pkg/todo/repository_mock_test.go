// Code generated by mockery v2.36.0. DO NOT EDIT.

package todo_test

import (
	context "context"

	todo "github.com/max-weis/todo-ssr/pkg/todo"
	mock "github.com/stretchr/testify/mock"
)

// repositoryMock is an autogenerated mock type for the Repository type
type repositoryMock struct {
	mock.Mock
}

// List provides a mock function with given fields: ctx
func (_m *repositoryMock) List(ctx context.Context) ([]todo.Todo, error) {
	ret := _m.Called(ctx)

	var r0 []todo.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]todo.Todo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []todo.Todo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]todo.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *repositoryMock) Save(ctx context.Context, _a1 todo.Todo) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, todo.Todo) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, old, new
func (_m *repositoryMock) Update(ctx context.Context, old todo.Todo, new todo.Todo) error {
	ret := _m.Called(ctx, old, new)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, todo.Todo, todo.Todo) error); ok {
		r0 = rf(ctx, old, new)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newRepositoryMock creates a new instance of repositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *repositoryMock {
	mock := &repositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
